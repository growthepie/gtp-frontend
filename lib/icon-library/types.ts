// Represents a gradient grouped purely by its color sequence for UI purposes
export interface CollapsedGradient {
  colorSignature: string; // e.g., "#fe5468|#ffdf27"
  originalHashes: string[]; // List of unique structure hashes that share this color signature
  stops: Array<{ color: string }>; // Just the colors for display/editing
}

/**
 * Represents the extracted colors from an SVG.
 */
export interface ExtractedColors {
  solidColors: string[];
  gradients: GradientInfo[];
}

/**
 * Represents information about an SVG gradient.
 */
export interface GradientInfo {
  id: string;
  type: 'linear' | 'radial';
  stops: GradientStop[];
  [key: string]: any; // For other attributes like x1, y1, cx, cy, etc.
}

/**
 * Represents a color stop within an SVG gradient.
 */
export interface GradientStop {
  offset: string;
  color: string;
  opacity: string;
}

/**
 * Represents the result of downloading and processing an SVG.
 */
export interface SVGResult {
  path: string;
  content: string; // Optimized SVG content
  colors: ExtractedColors;
  originalContent?: string;
}

// Structures generated by build script AND used by frontend
export interface IconIndexEntry {
  type: string;
  category: string;
  name: string;
  filePath: string;
  figmaNodeId: string;
  solidColors: string[];
  gradientRefs: string[];
}

export interface UniqueGradientStructure extends Omit<GradientInfo, 'id'> {
  // Add a unique hash representing this structure
  hash: string;
}

export interface IconLibraryData {
  icons: IconIndexEntry[];
  palette: {
    uniqueSolidColors: string[];
    uniqueGradients: UniqueGradientStructure[];
  };
}

// --- OKLCH Shift State ---
export interface OklchShifts {
  l: number; // Lightness shift (+/- percentage points, e.g., -100 to 100)
  c: number; // Chroma shift (+/- absolute value, range depends, maybe -0.2 to 0.2 is practical)
  h: number; // Hue shift (+/- degrees, -180 to 180 or 0-360)
}

// --- HSL Shift State ---
export interface HSLShifts {
  hue: number; // Typically -180 to 180 or 0 to 360
  saturation: number; // Typically -100 to 100 (percentage points)
  lightness: number; // Typically -100 to 100 (percentage points)
}

// Types related to frontend customization state
export type CustomizationMode =
  | 'original'           // Default view
  | 'currentColor'       // Apply CSS currentColor keyword
  | 'singleColorPicker'  // Apply one user-picked color everywhere
  | 'customPalette';     // Use HSL shifts and gradient overrides

export type SolidColorOverrides = Record<string, string>; // Used by customPalette (derived)
export type GradientOverrides = Record<string, { stops: Record<number, string> }>; // Used by customPalette

