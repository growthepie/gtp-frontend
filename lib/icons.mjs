// 1. export icons from Figma using Export Variants plugin
// - select 1 or more layers in Figma that contain SVG icon variants
// - run Export Variants plugin
// - for "Use variant names for" option, select "Folders"
// - click Export
// - copy the exported SVG files to this project's icons/small directory
// 2. run "node lib/icons.mjs" to generate icons/gtp2.json

import { promises as fs } from "fs";
import {
  importDirectory,
  cleanupSVG,
  runSVGO,
  parseColors,
  isEmptyColor,
} from "@iconify/tools";

(async () => {
  // json filename to export
  const jsonFilename = "icons/gtp-figma-export.json";
  // Import icons
  const iconSet = await importDirectory("icons/small", {
    prefix: "gtp",
  });

  // Validate, clean up, fix palette and optimise
  await iconSet.forEach(async (name, type) => {
    if (type !== "icon") {
      return;
    }

    const svg = iconSet.toSVG(name);
    if (!svg) {
      // Invalid icon
      iconSet.remove(name);
      return;
    }

    // Clean up and optimise icons
    try {
      // Clean up icon code
      await cleanupSVG(svg);

      // Assume icon is monotone: replace color with currentColor, add if missing
      // If icon is not monotone, remove this code
      await parseColors(svg, {
        defaultColor: "currentColor",
        callback: (attr, colorStr, color) => {
          return !color || isEmptyColor(color) ? colorStr : "currentColor";
        },
      });

      // Optimise
      await runSVGO(svg);
    } catch (err) {
      // Invalid icon
      console.error(`Error parsing ${name}:`, err);
      iconSet.remove(name);
      return;
    }

    // Update icon
    iconSet.fromSVG(name, svg);
  });

  // Export as IconifyJSON
  const exported = JSON.stringify(iconSet.export(), null, "\t") + "\n";

  // Save to file
  await fs.writeFile(jsonFilename, exported, "utf8");

  // get the icon names and write to a file for use in typescript
  const newIconNames = iconSet.list();

  // get the icon names from the icons/gtp.json file
  const oldIconsFile = await fs.readFile("icons/gtp.json", "utf8");
  const oldIcons = JSON.parse(oldIconsFile);

  const oldIconNames = Object.keys(oldIcons.icons);

  // merge the old and new icon names
  const GTPIconNames = [...new Set([...oldIconNames, ...newIconNames])];

  const iconNamesFile = "icons/gtp-icon-names.ts";

  await fs.writeFile(
    iconNamesFile,
    `// This file is generated by lib/icons.mjs
export const iconNames = ${JSON.stringify(GTPIconNames, null, 2)};
export type GTPIconName = ${GTPIconNames.map((name) => `"${name}"`).join(
      " | ",
    )};`,
    "utf8",
  );

  console.log(`Icons exported to ${jsonFilename}`);
  console.log(`Icon names exported to ${iconNamesFile}`);
})();
